; ## Set namespace
(load "../contracts/tests/set-defaults.repl")

; ## Load Keysets
(begin-tx "Load Keysets")
  (env-data {
    "admin-keyset":          {"keys": ["admin"],       "pred": "keys-all"},
    "supply-manager-keyset": {"keys": ["supply-manager"], "pred": "keys-all"},
    "freeze-manager-keyset":  {"keys": ["freeze-manager"],  "pred": "keys-all"},
    "pool-admin-keyset":     {"keys": ["pool-admin"],   "pred": "keys-all"},
    "oracle-keyset":         {"keys": ["oracle"],       "pred": "keys-all"}
  })
  (load "../contracts/tests/kusd.keys.pact")
  (load "../contracts/tests/stability-pool.keys.pact")
(commit-tx)

; ## Contract Deployment
(begin-tx "Load Contracts")
  (env-data { 'ns: "free", 'upgrade: false,
              "pool-admin-keyset": {"keys": ["pool-admin"], "pred": "keys-all"} })
  (env-sigs [
    { 'key: "admin",      'caps: [] },
    { 'key: "cdp-admin",  'caps: [] },
    { 'key: "pool-admin", 'caps: [] }
  ])
  (load "../contracts/kusd.pact")
  (load "../contracts/stability-pool.pact")
  (env-gasmodel 'table)
  (env-gaslimit 150000)
  (expect "Typecheck KUSD"           () (typecheck "cdp.kusd-usd"))
  (expect "Typecheck Stability Pool" () (typecheck "cdp.stability-pool"))
(commit-tx)

; ## Account Creation & Funding
(begin-tx "Create & Fund kUSD Accounts")
  (env-data {
    "alice-guard":      {"keys": ["alice"],      "pred": "keys-all"},
    "bob-guard":        {"keys": ["bob"],        "pred": "keys-all"},
    "liquidator-guard": {"keys": ["liquidator"], "pred": "keys-all"}
  })
  (let ((alice-principal      (create-principal (read-keyset "alice-guard")))
        (bob-principal        (create-principal (read-keyset "bob-guard")))
        (liquidator-principal (create-principal (read-keyset "liquidator-guard"))))
    ;;Create accounts
    (cdp.kusd-usd.create-account alice-principal       (read-keyset "alice-guard"))
    (cdp.kusd-usd.create-account bob-principal         (read-keyset "bob-guard"))
    (cdp.kusd-usd.create-account liquidator-principal (read-keyset "liquidator-guard"))
    ; Fund accounts
    (env-sigs [{'key: "supply-manager", 'caps: [(cdp.kusd-usd.SUPPLY_MANAGER)]}])
    ;; cannot directly mint kusd-usd
    ;  (cdp.kusd-usd.mint alice-principal      100.0)
    ;  (cdp.kusd-usd.mint bob-principal        200.0)
    ;  (cdp.kusd-usd.mint liquidator-principal 50.0)
  )
(commit-tx)

; ## Stability Pool Bootstrap
; i should be able to call functions on kusd <-- but we need the pact gods for this.
(begin-tx "Stability Pool Bootstrap")
  (env-sigs [{'key: "pool-admin", 'caps: [(cdp.stability-pool.GOVERNANCE)]}])
  (cdp.stability-pool.init-pool)
  (expect-failure "re-init" "Pool already initialized"
  (cdp.stability-pool.init-pool))
(commit-tx)

; ## Deposit Only Test
(begin-tx "Deposit Test")
  (env-data {
    "alice-guard": {"keys": ["alice"], "pred": "keys-all"}
  })
  (let ((alice-principal (create-principal (read-keyset "alice-guard")))
        (pool-principal  (cdp.stability-pool.pool-principal "main")))
    (env-data { 'sender: alice-principal })
    (env-sigs
      [{'key: "alice", 'caps: [
          (cdp.kusd-usd.TRANSFER alice-principal pool-principal 50.0)
        ]}])
    (expect-failure "deposit zero"     "Deposit amount must be > 0"
      (cdp.stability-pool.deposit-kusd 0.0))
    (expect-failure "deposit negative" "Deposit amount must be > 0"
      (cdp.stability-pool.deposit-kusd -1.0))
    (cdp.stability-pool.deposit-kusd 50.0)
    (expect "pool totalDeposits" 50.0
      (at 'totalDeposits (cdp.stability-pool.get-pool-state "main")))
    (expect "alice claim" 50.0
      (at 'deposit (cdp.stability-pool.get-claim alice-principal)))
  )
(commit-tx)

; ## Withdraw Only Test
; ## Withdraw Only Test
(begin-tx "Withdraw Test")
  (env-data {
    "alice-guard":       {"keys": ["alice"],       "pred": "keys-all"},
    "pool-admin-keyset": {"keys": ["pool-admin"],  "pred": "keys-all"}
  })
  (let ((alice-principal (create-principal (read-keyset "alice-guard")))
        (pool-principal  (cdp.stability-pool.pool-principal "main")))
    ; Set the sender explicitly
    (env-data { 'sender: alice-principal })

    ; **Set transaction signatures and capabilities:**
    ; Alice needs the WITHDRAW-KUSD cap
    ; Pool-admin needs both POOL-RESERVE and kUSD TRANSFER cap
    (env-sigs
      [
        { 'key: "alice", 'caps: [

          ]
        }
        { 'key: "pool-admin", 'caps: [
            (cdp.stability-pool.POOL-RESERVE "main")
            ; (cdp.kusd-usd.TRANSFER pool-principal alice-principal 20.0)
          ]
        }
      ])

    ; Run the tests
    (expect-failure "withdraw zero"     "Withdraw amount must be > 0"
      (cdp.stability-pool.withdraw 0.0))
    (expect-failure "withdraw negative" "Withdraw amount must be > 0"
      (cdp.stability-pool.withdraw -5.0))
    (expect-failure "overwithdraw"      "Exceeds deposit"
      (cdp.stability-pool.withdraw 100.0))
    
    (cdp.stability-pool.withdraw 20.0)
    (expect "alice deposit" 30.0
      (at 'deposit (cdp.stability-pool.get-claim alice-principal)))
    (expect "pool totalDeposits" 30.0
      (at 'totalDeposits (cdp.stability-pool.get-pool-state "main")))
  )
(commit-tx)
